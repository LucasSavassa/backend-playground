/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    ALU(x[0..14]=address, y[0..12]=true, zx=false, nx=false, zy=false, ny=false, f=true, no=false, out=sum, zr=zero, ng=invalid);
    Not(in=invalid, out=valid);
    Not(in=address[14], out=naddress14);
    And(a=valid, b=naddress14, out=ram);
    And(a=valid, b=address[14], out=io);
    Not(in=address[13], out=naddress13);
    And(a=io, b=address[13], out=keyboard);
    And(a=io, b=naddress13, out=display);
    Not(in=address[12], out=naddress12);
    And(a=display, b=naddress12, out=display1);
    And(a=display, b=address[12], out=display2);

    And(a=load, b=ram, out=loadRam);
    RAM16K(in=in, load=loadRam, address=address[0..13], out=outRam);
    And(a=load, b=display1, out=loadDisplay1);
    RAM4K(in=in, load=loadDisplay1, address=address[0..11], out=outDisplay1);
    And(a=load, b=display2, out=loadDisplay2);
    RAM4K(in=in, load=loadDisplay2, address=address[0..11], out=outDisplay2);
    Keyboard(out=outKeyboard);

    And(a=valid, b=naddress14, out=selRam);
    And(a=valid, b=address[14], out=selIO);
    And(a=selIO, b=naddress13, out=selDisplay);
    And(a=selIO, b=address[13], out=selKeyboard);
    And(a=selDisplay, b=naddress12, out=selDisplay1);
    And(a=selDisplay, b=address[12], out=selDisplay2);

    Mux16(a=outDisplay1, b=outDisplay2, sel=selDisplay2, out=outDisplay);
    Mux16(a=outDisplay, b=outKeyboard, sel=selKeyboard, out=outIO);
    Mux16(a=outRam, b=outIO, sel=selIO, out=out);
}
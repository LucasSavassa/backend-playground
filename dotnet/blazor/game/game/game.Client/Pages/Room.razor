@using Microsoft.AspNetCore.SignalR.Client
@using entities

<h3>Room</h3>

@if (CurrentRoom is not null)
{
    <h3>@CurrentRoom.Name</h3>

    if (CurrentRoom.Players.Count < 2)
    {
        <h4>Waiting for another player...</h4>
    }
    else if (!CurrentRoom.Game.Started)
    {
        <h4>Waiting for host to start the game...</h4>

        <button @onclick="Start">Start</button>
    }
    else
    {
        <h4>@CurrentRoom.Game.CurrentPlayerSymbol turn</h4>
    }

    <p>White: @CurrentRoom.Players.Find(player => player.ConnectionId == CurrentRoom.Game.PlayerWhiteId)?.Name</p>
    <p>Black: @CurrentRoom.Players.Find(player => player.ConnectionId == CurrentRoom.Game.PlayerBlackId)?.Name</p>
}
else
{
    <p>No room selected.</p>
}

@code {
    [CascadingParameter]
    public HubConnection? Hub { get; set; }

    [Parameter]
    public GameRoom? CurrentRoom { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentRoom is null)
        {
            return;
        }

        if (Hub is null)
        {
            return;
        }

        if (Hub.ConnectionId is null)
        {
            return;
        }

        Hub.On<Player>("PlayerJoined", (player) =>
        {
            StateHasChanged();
        });

        Hub.On<GameRoom>("GameUpdated", (room) =>
        {
            CurrentRoom = room;
            StateHasChanged();
        });
    }

    private async Task Start()
    {
        if (Hub is null)
        {
            return;
        }

        if (CurrentRoom is null)
        {
            return;
        }

        await Hub.InvokeAsync("StartGame", CurrentRoom.ID);
    }
}
